//go:build darwin

package main


import (
	// "fmt"
	"log"
	"unsafe"
	// "os"
	// "os/exec"
	// "syscall"
)

func elevate() {
	// Check if the program is already running with elevated privileges
	// if syscall.Geteuid() == 0 {
	// 	// Your code that requires elevated privileges goes here
	// 	fmt.Println("Running with elevated privileges")
	// } else {
	// Request elevated privileges
	status := C.requestElevatedPrivileges()
	log.Println("ELEVATE STATUS:", status)
	log.Println("ELEVATE STATUS:", status)
	log.Println("ELEVATE STATUS:", status)
	log.Println("ELEVATE STATUS:", status)
	log.Println("ELEVATE STATUS:", status)
	log.Println("ELEVATE STATUS:", status)

	// If privileges were obtained successfully, execute the program again with elevated privileges
	// cmd := exec.Command("networksetup")
	// cmd.SysProcAttr = &syscall.SysProcAttr{Credential: &syscall.Credential{Uid: 0, Gid: 0}, Setpgid: true, Setsid: true, Foreground: true}
	// cmd.Stdout = os.Stdout
	// cmd.Stderr = os.Stderr
	// cmd.Stdin = os.Stdin
	// argv0 := C.CString("fdslkfjskld")
	// defer C.free(unsafe.Pointer(argv0))
	// C.system(argv0)
	// C.fflush(C.stdout)
	FP := C.ExecuteStuff()
	log.Println(FP)
	// log.Println(C.system(argv0))

	// if err := cmd.Start(); err != nil {
	// 	fmt.Println("Error running with elevated privileges:", err)
	// 	os.Exit(1)
	// }
}
